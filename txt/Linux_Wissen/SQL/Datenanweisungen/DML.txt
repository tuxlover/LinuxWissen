Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-11-12T16:05:19+01:00

====== DML ======
Created Samstag 12 November 2011

* Data Manipulation Language
* Abfragen und Manipulieren von Datenbanken und deren Inhalten

=== Querry ===
* können mit Aggregatfunktionen kombiniert werden
Linux Wissen:SQL:Datenanweisungen:Aggregatfunktionen
Linux Wissen:SQL:Datenanweisungen:Mathematische Funktionen

**SELECT [<Name> AS ] [DISTINCT] <Werte>**
	**FROM <Tabelle|View>**
	**[WHERE <Filter>**
	**GROUP BY <wie_soll_gruppiert_werden>**
	**HAVING <Ausddruck>**
	**ORDER BY <ASC|DESC>[,<Spalte1>,...<Spalte N>]**
	''LIMIT''** <Anzahl der Zeilen>];|\G|\g**

**SELECT version(),user() [<Database>]**
→ Nutzer und Version der Datenbank <Database>

**SELECT * FROM <table>**
→ aus der der Tabelle <table> alle Zeilen anzeigen
→ die ganze Tabelle <table anzeigen> 

**SELCECT * FROM <table1>,...,<tableN>**
→ aus allen Tabellen <table1> bis <tableN> alle Zeilen auswählen
→ die Tabellen werden dabei kartesisch verknüpft

//Beispiel://
'''
SELECT Name,Population FROM City 
WHERE CountryCode='IND' 
AND Population > 3000000;
'''


== → !Achtung!: ==
**Sehr hohe Laufzeit!**

**SELECT <Spalte1>,<Spalte2>,... FROM <table> <Alias>**
→ aus einer Tabelle <table> mehrere Spalten abfragen
→ ein * steht stellvertretend für alle Spalten einer Tabelle

**SELECT <Spalte> INTO OUTFILE <Datei> FROM <table>**
→ eine <Spalte> einer Tabelle <table> in eine <Datei> schreiben
→ der Nutzer mysql muss entsprechend auf die Dateien Zugriff haben

== WHERE ==
**SELECT <Spalte> FROM <table> WHERE <Condition>**
→ nur die Werte von Spalte ausgeben die auf <Condition> passen
→ die <Condition> kann auch auf andere auf andere <Spalten> als auf die angezeigte verweisen
→ Währende des Querries
[[Linux Wissen:SQL:Bedingungen]]

**SELECT <Spalte1>,... /*eine oder mehrere Spalten */**
	**FROM <Tabelle> /* aus Tabelle */**
	**WHERE <BEDINGUNG> /* Wobei folgende Bedingugnen gelten */**
	**(**
	**SELECT <ABFRAGE>**
	**);**
→ Unterabfrage in einer Abfrage

== DISTINCT ==
→ festlegen dass jeder Wert nur einmal angezeigt werden soll

**SELECT DISTINCT <Spalte> from <Tabelle>**
→ eindeutige Zuordnungseinheiten
→ muss in sortierter From vorliegen

== GROUP BY ==
**SELECT <Spalte> FROM <table> WHERE <Condition> GROUP BY **
→ fasst Zeilen nach gemeinsamen Werten entsprechend von Spalte zusammen

//Beispiel://
//+++//
'''
SELECT ort, COUNT(*)
'''
	'''
	FROM person
	WHERE ort = 'Berlin' OR ort = 'Hamburg'
	GROUP BY ort;
	'''
//+++//
//>> Berlin 212//
//>> Hamburg 17//

== HAVING ==
**SELECT <Spalte> FROM <table> WHERE <Condition1> GROUPBY <Spalte> HAVING <Conditon2> **
→ herausfiltern von unerwünschten Gruppen
→ Having wirkt nach dem Querry

//Beispiel://
//+++//
'''
SELECT ort, COUNT(*)
'''
	'''
	FROM person
	GROUP BY ort
	HAVING COUNT(*) >= 100;
	'''
//+++//
//>> Berlin 212//
//>> Dresden 112//
//>> Köln 150//

== LIMIT ==
**SELECT <Spalte> FROM <table> WHERE <Condition1> LIMIT N**
→ die auf <Condition> zutreffenden Ergebnisse auf die ersten N Ergebnise limmitiren

== ORDER BY ==
**SELECT <Spalte> FROM <table> WHERE <Condtion> ORDER BY <SpalteA> [ ASC | DESC ]**
→ die auf <Condition> zutreffenden Ergebnisse nach <SpalteA> sortieren
→ sortiren der Abfrage nach 

== CONCAT ==
**SELECT CONCAT(<Zeile1> ,'[<TRENNER]',... ) AS Aliasse**
**FROM <Tabelle>**
**WHERE <Bedingung>**
**ORDER BY <Spalte> DESC|ASC;**

→ zusammenführen von Spalten ohne Schlüsselpaar

//Beispiele://
	''SELECT * FROM City;''
	
	''SELECT * FROM world.City;''
	
	''SELECT ID,Name,Population''
		'''
		FROM City;
		'''
	''SELECT Name AS 'City Name', Population Pop''
		''FROM City;''
		
	''SELECT * FROM Country WHERE IndepYear > 1988;''
	
	''SELECT * FROM Country''
		''WHERE Population > 50000 AND Conitnet='Africa';''
		
	''SELECT ID,firstname,lastname,hiredate''
		''ORDER BY hiredate DESC;''
		
	SELECT * FROM Country
		''WHERE (GNP > 500 AND Continent = 'Asia') OR Continent = 'Europe';''
		
	'''
	SELECT * FROM Country
	'''
		'''
		WHERE Country LIKE '%A'
		'''
			'''
			ORDER BY Population DESC;
			SELECT CONCAT(table_schema,'.',table_name)
				AS table_name,table_rows
					FROM information_schema.tables
						WHERE table_rows > 1000
							ORDER BY table_rows DESC;
			'''
==== Manipulieren ====
* Tabellen mit Daten auffüllen
* Daten in Tabellen aktualisierien
* Daten in Tabellen verändern

== INSERT ==
→ schreiben von Daten in eine Tabelle
→ neue Einträge in eine Datenbank Tabelle hinzufügen
→ wird der Wert ''DEFAULT ''benutzt, wird der definierte Standardwert gesetzt
→ überschreibt keine bestehenden Werte

**INSERT INTO <table>  (<Attribute>,...)  VALUES  (<Werte>,...),(<Werte>,...)...;**
→ fügt in die Tabelle <table> die entsprrechenden <Attribute> und den dazugerhörigen <Werte> ein
→ bijektiv Abbildung
→ jeder Record wird als Vektor in einem Klammerpaar dargestellt
→ die <Attribute> müssen bereits definiert sein

**INSERT INTO <Tabelle> VALUES (<Werte>)**
→ NULL und DEFAULT Werte werden ersetzt

**INSERT INTO <table1> SELECT <Spalte> FROM <table2>**
→ Werte von einer Tabelle <table2> einer <Spalte> in die Tabelle <table1> einfügen
→ Dimenstion und Attribute müssen übereinstimmen

**INSERT INTO emp SET <Spalte>=<Wert>,...;**

//Beispiel://
3 verschieden Möglichkeiten;
(1) ''INSERT INTO emp(id,last_name,Number) ''
	'''
	VALUES (10,'jonson',2089487);
	'''
(2)'' INSERT INTO emp VALUES(10,'jonson',2089487);''

(3) ''INSERT INTO emp''
	'''
	SET id=10, last_name='jonson',Number=2089487;
	'''
Mehere Records einfügen:
(1) ''INSERT INTO Dinner(Vorspeise,Nachspeise) ''
	'''
	VALUES('Nudeln','Pudding'),('Steak','Joghurt');
	'''
== REPLACE ==
→ hinzufügen meherer Records
→ ersetzt bestehende Records
→ ''DELETE und INSERT'' als ein Befehl

**REPLACE INTO <Tabelle> **
	**SET <Spalte1>=<Wert1>,...,<SpalteN>=<WertN>;**
	
//Beispiel://
''REPLACE INTO emp''
	''SET id=3,frst_name='Joseph',Geld=1000;''


== UPDATE ==
→ ANSI/ISO Standard DML Statement
→ verändern von Daten in einer Tabelle
→ das Attribut ist bereits vergeben
→ Ein Attribut wird aufgrund eines Matches in einer WHERE Klausel geändert

**UPDATE <table> SET <Attribut>=<Wert> [ WHERE= <Condition>] [LIMIT N,M]**
→ setzt einen neuen <Wert> für Attribut von Tabelle <table> wo die Bedingungen <Condition> zutreffen
→ mehrere Attribute müssen durch Kommata getrennt werden
→ ''WHERE ''Klausel muss mit angegeben werden, da sonst jeder Record aktualisiert wird
→ Mit LIMIT wird die WHERE Klausel weiter eingeschärnkt, falls es zum Beispiel meherer Einträge Maier gibt
→ ''sql_safe_update ''in my.cnf  erzwingt die eindeutige Eingrenzung durch ''WHERE'' Klausel
[[Linux Wissen:FHS:etc:my.cnf]]

//Beispiel://
'''
UPDATE personen
'''
	'''
	SET nachname='Schmit'
	'''
		'''
		WHERE nachname='Anders'
		'''
			'''
			LIMIT 1;
			'''
