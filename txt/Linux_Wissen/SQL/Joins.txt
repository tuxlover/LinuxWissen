Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-05-04T02:45:47+02:00

====== Joins ======
Created Mittwoch 04 Mai 2011

* relatives Verbindden von Attributen zu einer Abfrage, liefert eine Tabelle zurück
* eine Datenbank ist umso mächtiger je mehr Verknüpfungen sie bilden kann

=== Old Style Join ===
**SELECT <TabelleA>.<spalte1_TabelleA> , <TabelleB>.<spalte2_TabelleB>**
	**FROM <TabelleA>, <TabelleB>**
	**WHERE <spalteX>.<TabelleA> = <spalteX>.<TabelleB> **


=== Join ===
→ erlaubt die Verknüpfung alter 
**SELECT <TabelleA>.<Spalte1_TabelleA>, <TabelleB>.<Spalte2_TabelleB>**
	**FROM <TabelleA> JOIN <TabelleB>**
	**ON <TabelleA>.<SpalteX> = <TabelleB>.<SpalteX>**
	**[WHERE BEDINGUNG ...]**
	
//Beispiel://
'''
SELECT customer.first_name, customer.last_name, address.address 
'''
	'''
	FROM customer JOIN address 
	ON customer.address_id = address.address_id 
	ORDER BY customer.last_name;
	'''



=== Inner Joins ===
→ verbietet die Verknüpfung leerer Datensätze
→ gibt  nur Datensätze aus, die in beiden Tabellen vorhanden sind

**SELECT <TabelleA>.<Spalte1>,... <TabelleB>.<Spalte2>,...**
	**FROM <TabelleA> INNER JOIN <TabelleB>**
	**ON <TabelleA>.<SpalteX> = <TabelleB>.<SpalteX>**
	....

→ falls beide Fremdschlüssel verschiedene Attribute haben

//Beispiel://
'''
SELECT actor.first_name, actor.last_name,city.city 
'''
	'''
	FROM actor 
	INNER JOIN  city ON actor.actor_id = city.city_id;
	'''



== *  Column Name Join ==

**SELECT <TabelleA>.<Spalte1>,... <TabelleB>.<Spalte2>,...**
	**FROM <TabelleA> JOIN <Tabelle2>**
	**USING <spalteX>**
	
→ Spalten sind in beiden Tabellen gleich benannt
→ falls beide Schlüssel gleiche Attribute haben
→ __Hinweis: darauf Achten dass der Schlüssel geklammert werden muss__

//Beispiel://
''SELECT film_actor.actor_id, film_actor.last_update, actor.actor_id,actor.first_name,actor.last_name FROM film_actor INNER JOIN actor USING (actor_id);''

== •  Natural Join ==

**SELECT <TabelleA>.<Spalte1>,...<TabelleB>.<Spalte2>,...**
	**FROM <TabelleA> NATURAL JOIN <TabelleB>**


→ verknüpft über den gleichen Spaltenname
→ alle Spalten müssen in den zu verknüpfenden Tabellen vorhanden sein

== • Self Join ==
→ Tabellen mit sich selbst verknüpfen

**SELECT <Alias1>.<Spalte1>,...<Alias2>.<Spalte2>,...**
	**FROM <Tabelle> AS <Alias1> INNER JOIN <Tabelle> AS <Alias2>**
	**USING <Spalte>**

//Beispiel://
'''
SELECT s1.Name, s2.Name AS Geschw, s1.Vater
'''
	'''
	FROM Film AS s1 INNER JOIN Film AS s2 
	USING Vater 
	WHERE s1.name <> s2.name;
	'''



=== Cross Join ===
→ verbindet alle Zeilen der einen Tabelle mit allen Zeilen einer anderen Tabelle
→ bildet das kartesiche Produkt aller Spalten

**SELECT <TabelleA>.<Spalte1>,...<TabelleB>.<Spalte2>,...**
	**FROM <TabelleA> CROSS JOIN <TabelleB>**

//Beispiel://
'''
SELECT title.film, film_id.film_actor 
'''
	'''
	FROM title CROSS JOIN film_actor;
	'''

>> 200000 rows in set (0.24 sec)

