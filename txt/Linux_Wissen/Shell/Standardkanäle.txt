Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-04-18T16:35:17+02:00

====== Standardkanäle ======
Created Montag 18 April 2011

===== Diskriptoren =====
**0 **→ Standardeingabe (StdIn)
**1 **→ Standardausgabe (StdOut)
**2 **→ Standardfehler (StdtErr)
**3,...** → weiter Dateidiskriptoren

===== Umleitungsoperatoren =====
**> Datei.txt **→ Umlenkung von Standardausgabe
**>> Datei.txt  **→ Umlenkung der Standardausgabe, dabei anhängen nicht überschreiben
**2> Datei.txt **→ Umlenken von StdErr 
**&> Datei.txt**→ Umlenken von StdtOut und StdErr 
**< Datei.txt **→ StdIn wird von Datei.txt eingelesen
**>|Datei.txt → **erzwingt die Umleitung, auch wenn noclobber als Option in Bash gesetzt wurde ( [[Bash:Optionen für die Bash]])
**>N|Datei.txt **→ erzwingt die Umleitung auch wenn noclobber als Option in Bash gesetzt wurde
**<< EOF **→ Label für Here Dokumente
**N>&{M} **→ anhängen der Ausgabe von Diskriptor N an StdOut oder an Diskriptor M
**N<&{M} **→ anhängen der Ausgabe der Eingabe von Diskriptor M and StdtOut oder an Diskriptor N
**{N}<&- **→ StdIn oder Eingabe von Diskriptor N schließen
**{N}>&-** → StdOut oder Ausgabe von Diskriptor N schließen

**:> <Datei> **→ dasselbe wie **cat /dev/null > <Datei>**
**<Befehl> > <Datei> **→ Ausgabe in Datei umlenken
**<Befehl> 2> <Datei> **→ Fehlerausgabe in <Datei> umlenken
**<Befehl> &> <Datei> **→ Standardausgabe und Fehler in <Datei> umleiten
**<Befehl> > <Datei> 2>&1 **→ -"                                                                 "-
** <Befehl> >> <Datei> **→ Ausgabe an <Datei> anhängen
**<Befehl> < <Datei> **→ Programm liest eingabe aus <Datei>
**<Befehl> 3&1 1> output 2>&3** → Standardausgabe wird in die Datei output gelenkt und der Inhalt von Datei output in die Standardfehlerausgabe
**{  <Befehl1> <Befehl2> ... <BefehlN> } > <Output.txt> **→ Die Augabe der Befhele in {} an <Outout.txt> senden
__Hinweis: zwischen den { }  muss ein Leerzeichen sehen__

=== Achtung!: ===
<Befehl> 2>&1 > <Datei> leitet __nicht__ in die <Datei> um

///dev/fd/N// → Dateidiskriptor N

===== Pipes =====
**<programm1>|<programm2> **→ <programm2> nimmt seine Eingabeargumente aus der Ausgabe  von
								<programm1>

**tee**
**<programme1>** |**tee [-a] <Datei>|<programm2> **→  <programm1> leitet seine Eingabeargumente in <Datei> und nach <programm2> weiter
**-a **→ an <Datei> anhängen
 
**xargs **→ Ausgabe eines Programms als Argumente Zeilenweise weiterleiten
	   → oft im zusammenhang mit find
**-0 **→ Argumente werden durch das Null Zeichen und nicht durch Leerzeichen getrennt
     → In zusammenhang mit **find -print0 **([[Linux Wissen:Dateien verwalten:Dateien suchen und indizieren:find]])
**-a <Datei>  **→ Argumente aus <Datei> einlesen
**-d <Delimiter> **→ den Trenner Setzen
**-I** <Marker> → ersetze <Marker> mit der Liste der Argumente
**-p **→ Nach jeder Operation um Erlaubnis fragen 
**-r **→ Wenn Leerzeichen enthalten sind, wird das Programm nicht ausgeführt

//Beispiele://
//jede mit find gefundene Datei in ein Archiv packen//
''find / -name "*.bak" |xargs tar xvfz backup.tar.gz''

//jede mit find gefundene .bak Datei in den Müll verschieben//
'' find . -name "*.bak" -print0 | xargs -0 -I {} mv {} /tmp/trash''
'' find . -name "*.bak" -print0 | xargs -0 -I xxx mv xxx /tmp/trash''

//Dateien eines bestimmten Jahrgangs finden und löschen//
''ls -lisah | awk '{if ($10 == 2001) print $11}'|xargs -I {} rm -rf {}''

__Hinweis: beachte die Wirkung von set -o noclobber __
[[Linux Wissen:Shell:Bash:Optionen für die Bash]]
