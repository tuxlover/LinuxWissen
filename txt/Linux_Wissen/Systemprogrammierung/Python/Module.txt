Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2012-12-25T13:35:41+01:00

====== Module ======
Created Dienstag 25 Dezember 2012

* Module werden mit dem Befehl **import **in das Hauptprogramm eingebunden
* Jedes Python Script ist ein Modul und kann später im Programm verwendet werden
* die größte Programmstruktur in Python sind Module
* Module stellen einen Namenspace bereit, der aus Funktionen, Variablen und wiederum Klassen und Objekten bestehen kann
* Ein Modul ist eine Klasse von Objekten die Definitionen für dessen Objekte sowie deren Funktionen und Variablen enhält
[[Variablen]]
[[Funktionen]]

=== generischer Import ===
* wenn ein Modul ohne Angabe welche Funktionen genutzt werden sollen importiert wird
* generische Importe müssen immer explizit die Funktion aus dieser Klasse callen (also //math.sqrt(25)// anstelle von //sqrt(25//) )

**import <modul>**

//Beispiel://
'''
import math
print math.sqrt(25)
'''


=== Funktionen importe (function imports) ===
* Wenn ein Modul mit Angabe einer spezillen Funktion die weiteren Verlauf des Programs auch genutzt werden soll
* im gegensatz zu den generischen Importen kann  bei direkten Importeieren von Funktionen aus Klassen die Funktion auch direkt gecallt werden. 
* Jedes Mal wenn ein Import stattfindet wird der komplette Code erneut ausgeführt. 
* Imports können nur einmal in jedem Modul verwendet werden (Nutzung der** reload **Funktion im Modul erneut auszuführen)

**from <modul> import <function>**

//Beispiel://
'''
from math import sqrt
sqrt(25)
'''
 

=== Universelle Importe (universal imports) ===
* Wenn alle Funktionen aus einem Modul importiert werden
* es können alle Funktionen direkt genutzt werden
* Funktionen die von einem früherem Import übernommen wurden und den gleichen Namen haben, werden überschrieben
**!!!**__sollten aus Sicherheits und Performencegründen niemals verwendet in einem Programm verwendet werden !!!__

**from <modul> import ***

//Beispiel://
'''
from math import *
sqrt(25)
sin(pi/2)
'''


=== !!Achtung!! ===
**Beim importieren von eigenen Modulen nicht die Dateiendung .py verwenden beim Ausführen von exec allerdings schon**

=== Relaod ===
**reload '<Modulename>' [2.x]**

**from imp import reload **
**reload(<Modul>) [3.x]**
→ das Modul erneut ausgeühren
→ Vorrausetzung dafür ist dass es bereits einmal ausgeführt wurde

=== Exec ===
**exec(open('Module.py')).read()**
→ der komplette Code von Module.py wird ausgeführt und erneut ausgeleen
→ Exec führt den aktuell veränndeten Code on the fly aus / erneute importe sind nicht erforderlich
→ überschreibt den vorhandenen Namespace wie **from**
→ im Gegensatz zu **import **wird der Code bei jedem Aufruf von **exec()** erneut ausgeführt

=== Namespace eines Modules auslesen ===
**dir(<Module>)**
→ listet einen Tupel von Variablen und Funktionen die im Namespace des Moduls deklariert wurden.
→ jedes Modul beinhaltet immer den Namespace von //__buildins_//

=== !!!Warnung!!! ===
**Namespaces könnnen sich gegenseititg überschreiben.**
