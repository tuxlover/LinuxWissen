Content-Type: text/x-zim-wiki
Wiki-Format: zim 0.4
Creation-Date: 2011-10-18T22:35:57+02:00

====== Daemon ======
Created Dienstag 18 Oktober 2011

* Manchmal will man ein Script als Damon laufen lassen

**nohup Daemon.sh 0<&- 1>/dev/null 2>&1 &**
**nohup Daemon.sh >>/var/log/daemon.log & 2>&1 <&- &**

* nohup sagt dem Script dass es beim Schließen oder Abmelden der aktuellen Sitzung weiterlaufen soll
* StdOut und StdErr werden entweder nach /dev/null oder ein Logfile (/var/log/daemon.log) geschickt
* Der Diskriptor für StdIn wird geschlossen (0<&-|<&-)
* als letztes wird das Programm als eigenständiger Kindprozess geforked, dieses geschieht mittels & 
[[Linux Wissen:Shell:Standardkanäle]]

++
'''
# redirect tty fds to /dev/null
redirect-std() {
//     -t 0  && exec </dev/null//
//     -t 1  && exec >/dev/null//
//     -t 2  && exec 2>/dev/null//
}
 
# close all non-std* fds
close-fds() {
    eval exec {3..255}\>\&-
}
 
# full daemonization of external command with setsid
daemonize() {
    (                   # 1. fork
        redirect-std    # 2.1. redirect stdin/stdout/stderr before setsid
        cd /            # 3. ensure cwd isn't a mounted fs
        # umask 0       # 4. umask (leave this to caller)
        close-fds       # 5. close unneeded fds
        exec setsid "$@"
    ) &
}
 
# daemonize without setsid, keeps the child in the jobs table
daemonize-job() {
    (                   # 1. fork
        redirect-std    # 2.2.1. redirect stdin/stdout/stderr
        trap '' 1 2     # 2.2.2. guard against HUP and INT (in child)
        cd /            # 3. ensure cwd isn't a mounted fs
        # umask 0       # 4. umask (leave this to caller)
        close-fds       # 5. close unneeded fds
//        if  $(type -t "$1") != file ; then//
            "$@"
        else
            exec "$@"
        fi
    ) &
    disown -h $!       # 2.2.3. guard against HUP (in parent)
}
'''

++
→ falls man das Script von vornherein als Daemon anlegen will
